# VU upper instructions

define pcodeop VABS;
define pcodeop VADD;
define pcodeop VADDBC;
define pcodeop VCLIP;
define pcodeop VDIV;
define pcodeop VFTOI0;
define pcodeop VFTOI;
define pcodeop VIADD;
define pcodeop VIADDI;
define pcodeop VIAND;
define pcodeop VILWR;
define pcodeop VIOR;
define pcodeop VISUB;
define pcodeop VISWR;
define pcodeop VITOF;
define pcodeop VLQD;
define pcodeop VLQI;
define pcodeop VMADD;
define pcodeop VMADDBC;
define pcodeop VMAX;
define pcodeop VMAXI;
define pcodeop VMAXBC;
define pcodeop VMFIR;
define pcodeop VMINI;
define pcodeop VMINII;
define pcodeop VMINIBC;
define pcodeop VMOVE;
define pcodeop VMR32;
define pcodeop VMSUB;
define pcodeop VMSUBBC;
define pcodeop VMTIR;
define pcodeop VMUL;
define pcodeop VMULBC;
define pcodeop VOPMULA;
define pcodeop VOPMSUB;
define pcodeop VRGET;
define pcodeop VRINIT;
define pcodeop VRNEXT;
define pcodeop VRSQRT;
define pcodeop VRXOR;
define pcodeop VSQD;
define pcodeop VSQI;
define pcodeop VSQRT;
define pcodeop VSUB;
define pcodeop VSUBBC;
define pcodeop VWAITQ;

I: "NI" is vuinterlock=0 { export 0:1; }
I: "I"  is vuinterlock=1 { export 0:1; }

dest: ""      is vudest=0b0000 { export 0:1; }
dest: ".w"    is vudest=0b0001 { export 1:1; }
dest: ".z"    is vudest=0b0010 { export 2:1; }
dest: ".zw"   is vudest=0b0011 { export 3:1; }
dest: ".y"    is vudest=0b0100 { export 4:1; }
dest: ".yw"   is vudest=0b0101 { export 5:1; }
dest: ".yz"   is vudest=0b0110 { export 6:1; }
dest: ".yzw"  is vudest=0b0111 { export 7:1; }
dest: ".x"    is vudest=0b1000 { export 8:1; }
dest: ".xw"   is vudest=0b1001 { export 9:1; }
dest: ".xz"   is vudest=0b1010 { export 10:1; }
dest: ".xzw"  is vudest=0b1011 { export 11:1; }
dest: ".xy"   is vudest=0b1100 { export 12:1; }
dest: ".xyw"  is vudest=0b1101 { export 13:1; }
dest: ".xyz"  is vudest=0b1110 { export 14:1; }
dest: ".xyzw" is vudest=0b1111 { export 15:1; }

dest_L: ""      is vudest_L=0b0000 { export 0:1; }
dest_L: ".w"    is vudest_L=0b0001 { export 1:1; }
dest_L: ".z"    is vudest_L=0b0010 { export 2:1; }
dest_L: ".zw"   is vudest_L=0b0011 { export 3:1; }
dest_L: ".y"    is vudest_L=0b0100 { export 4:1; }
dest_L: ".yw"   is vudest_L=0b0101 { export 5:1; }
dest_L: ".yz"   is vudest_L=0b0110 { export 6:1; }
dest_L: ".yzw"  is vudest_L=0b0111 { export 7:1; }
dest_L: ".x"    is vudest_L=0b1000 { export 8:1; }
dest_L: ".xw"   is vudest_L=0b1001 { export 9:1; }
dest_L: ".xz"   is vudest_L=0b1010 { export 10:1; }
dest_L: ".xzw"  is vudest_L=0b1011 { export 11:1; }
dest_L: ".xy"   is vudest_L=0b1100 { export 12:1; }
dest_L: ".xyw"  is vudest_L=0b1101 { export 13:1; }
dest_L: ".xyz"  is vudest_L=0b1110 { export 14:1; }
dest_L: ".xyzw" is vudest_L=0b1111 { export 15:1; }

bc: "x"      is vuft & vubc=0 { tmp:4 = vuft[0,32]; export tmp; }
bc: "y"      is vuft & vubc=1 { tmp:4 = vuft[32,32]; export tmp; }
bc: "z"      is vuft & vubc=2 { tmp:4 = vuft[64,32]; export tmp; }
bc: "w"      is vuft & vubc=3 { tmp:4 = vuft[96,32]; export tmp; }

fsf: ".x"     is vufsf=0 & vufs { tmp:4 = vufs[0,32]; export tmp; }
fsf: ".y"     is vufsf=1 & vufs { tmp:4 = vufs[32,32]; export tmp; }
fsf: ".z"     is vufsf=2 & vufs { tmp:4 = vufs[64,32]; export tmp; }
fsf: ".w"     is vufsf=3 & vufs { tmp:4 = vufs[96,32]; export tmp; }

ftf: ".x"     is vuftf=0 & vuft { tmp:4 = vuft[0,32]; export tmp; }
ftf: ".y"     is vuftf=1 & vuft { tmp:4 = vuft[32,32]; export tmp; }
ftf: ".z"     is vuftf=2 & vuft { tmp:4 = vuft[64,32]; export tmp; }
ftf: ".w"     is vuftf=3 & vuft { tmp:4 = vuft[96,32]; export tmp; }

:lqc2 vuft, OFF_BASE   is prime=54 & OFF_BASE & vuft {
    vuft[0,32] = *:4 OFF_BASE;
	vuft[32,32] = *:4 (OFF_BASE+4);
	vuft[64,32] = *:4 (OFF_BASE+8);
	vuft[96,32] = *:4 (OFF_BASE+12);
}

:sqc2 vuft, OFF_BASE   is prime=62 & OFF_BASE & vuft {
    *:4 OFF_BASE = vuft[0,32];
	*:4 (OFF_BASE+4) = vuft[32,32];
	*:4 (OFF_BASE+8) = vuft[64,32];
	*:4 (OFF_BASE+12) = vuft[96,32];
}

with : prime=18 {
    :bc2f Rel16        is vuop_21_25=0b01000 & vuop_16_20=0b00000 & Rel16 {
        tmp:1 = getCopCondition(2:1, 0:1);
        delayslot(1);
        if (tmp != 0) goto inst_next;
        goto Rel16;
    }

    :bc2fl Rel16       is vuop_21_25=0b01000 & vuop_16_20=0b00010 & Rel16 {
        tmp:1 = getCopCondition(2:1, 0:1);
        if (tmp != 0) goto inst_next;
        delayslot(1);
        goto Rel16;
    }

    :bc2t Rel16        is vuop_21_25=0b01000 & vuop_16_20=0b00001 & Rel16 {
        tmp:1 = getCopCondition(2:1, 0:1);
        if (tmp == 0) goto inst_next;
        delayslot(1);
        goto Rel16;
    }

    :bc2tl Rel16       is vuop_21_25=0b01000 & vuop_16_20=0b00011 & Rel16 {
        tmp:1 = getCopCondition(2:1, 0:1);
        if (tmp == 0) goto inst_next;
        delayslot(1);
        goto Rel16;
    }
    
    :cfc2.I RT, vuccid          is vuop_21_25=0b00010 & RT & vuccid & vuop_1_10=0b0000000000 & I
        { RT = zext(vuccid:4); }
    :ctc2.I RTsrc, vuccid       is vuop_21_25=0b00110 & RTsrc & vuccid & vuop_1_10=0b0000000000 & I
        { vuccid = RTsrc:4; }
    :qmfc2.I RT128, vufd_qmc2        is vuop_21_25=0b00001 & RT128 & vufd_qmc2 & I
    {
		RT128[0,32] = vufd_qmc2[0,32];
		RT128[32,32] = vufd_qmc2[32,32];
		RT128[64,32] = vufd_qmc2[64,32];
		RT128[96,32] = vufd_qmc2[96,32];
	}
    :qmtc2.I RT128, vufd_qmc2        is vuop_21_25=0b00101 & RT128 & vufd_qmc2 & vuop_1_10=0b0000000000 & I
    {
		vufd_qmc2[0,32] = RT128[0,32];
		vufd_qmc2[32,32] = RT128[32,32];
		vufd_qmc2[64,32] = RT128[64,32];
		vufd_qmc2[96,32] = RT128[96,32];
	}
    :vcallms imm15 "; address =" address is vuco=1 & vudest=0b0000 & imm15 & vuop_0_5=0b111000 [ address = imm15 * 8; ]
        { VCALLMS(imm15:4); }
    :vcallmsr "vi27"   is vuco=1 & vudest=0b0000 & vuft=0b00000 & vufs=0b11011 & fd=0b00000 & vuop_0_5=0b111001
        { VCALLMSR(); }
}

:vabs^dest vuft, vufs           is vuinst & dest & vuft & vufs & vuop_0_10=0b00111111101
    { vuft = VABS(dest, vufs); }
:vadd^dest vufd, vufs, vuft     is vuinst & dest & vuft & vufs & vufd   & vuop_0_5=0b101000
    { vufd = VADD(dest, vufs, vuft); }
:vaddi^dest vufd, vufs, "I"     is vuinst & dest & vuft=0b00000  & vufs & vufd   & vuop_0_5=0b100010
    { vufd = VADDBC(dest, vufd, vuI); }
:vaddq^dest vufd, vufs, Q     is Q & vuinst & dest & vuft=0b00000  & vufs & vufd   & vuop_0_5=0b100000
    { vufd = VADDBC(dest, vufs, Q); }
:vadd^bc^dest vufd, vufs, vuft  is vuinst & dest & vuft & vufs & vufd   & vuop_2_5=0b0000 & bc
    { vufd = VADDBC(dest, vufs, bc); }
:vadda^dest "ACC" vuft vufs     is vuinst & dest & vuft & vufs & vuop_0_10=0b01010111100
    { vuACC = VADD(dest, vuft, vufs); }
:vaddai^dest "ACC", vufs, "I"   is vuinst & dest & vuft=0b00000 & vufs  & vuop_0_10=0b01000111110
    { vuACC = VADDBC(dest, vufs, vuI); }
:vaddaq^dest "ACC", vufs, Q   is Q & vuinst & dest & vuft=0b00000 & vufs  & vuop_0_10=0b01000111100
    { vuACC = VADDBC(dest, vufs, Q); }
:vadda^bc^dest "ACC", vufs, vuft         is vuinst & dest & vuft & vufs & vuop_2_10=0b000001111 & bc
    { vuACC = VADDBC(dest, vufs, bc); }
:vclip"w.xyz" vufs, vuft        is vuinst & vudest=0b1110 & vuft & vufs & vuop_0_10=0b00111111111
    { vuCF_32 = VCLIP(vufs, vuft); }
:vdiv Q, vufs^fsf, vuft^ftf   is Q & vuinst & ftf & fsf     & vuft & vufs & vuop_0_10=0b01110111100
{
    build fsf;
    build ftf;
    Q = fsf f/ ftf;
}
:vftoi0^dest vuft, vufs         is vuinst & dest & vuft & vufs & vuop_0_10=0b00101111100
    { vuft = VFTOI0(dest, vufs); }
:vftoi4^dest vuft, vufs         is vuinst & dest & vuft & vufs & vuop_0_10=0b00101111101
    { vuft = VFTOI(dest, vufs); }
:vftoi12^dest vuft, vufs        is vuinst & dest & vuft & vufs & vuop_0_10=0b00101111110
    { vuft = VFTOI(dest, vufs); }
:vftoi15^dest vuft, vufs        is vuinst & dest & vuft & vufs & vuop_0_10=0b00101111111
    { vuft = VFTOI(dest, vufs); }
:viadd vuid, vuis, vuit         is vuinst & vudest=0b0000 & vuit & vuis & vuid   & vuop_0_5=0b110000
    { vuid = vuis + vuit; }
:viaddi vuit, vuis, vuimm5      is vuinst & vudest=0b0000 & vuit & vuis & vuimm5 & vuop_0_5=0b110010
    { vuit = vuis + sext(vuimm5:1); }
:viand vuid, vuis, vuit         is vuinst & vudest=0b0000 & vuit & vuis & vuid   & vuop_0_5=0b110100
    { vuid = vuis & vuit; }
:vilwr^dest vuit, (vuis)        is vuinst & dest & vuit & vuis & vuop_0_10=0b01111111110
    { vuit = VILWR(vuis); }
:vior vuid, vuis, vuit          is vuinst & vudest=0b0000 & vuit & vuis & vuid   & vuop_0_5=0b110101
    { vuid = vuis | vuit; }
:visub vuid, vuis, vuit         is vuinst & vudest=0b0000 & vuit & vuis & vuid   & vuop_0_5=0b110001
    { vuid = vuis - vuit; }
:viswr^dest vuit, (vuis)        is vuinst & dest & vuit & vuis & vuop_0_10=0b01111111111
    { VISWR(vuit, vuis); }
:vitof0^dest vuft, vufs         is vuinst & dest & vuft & vufs & vuop_0_10=0b00100111100
    { vuft = VITOF(dest, vufs); }
:vitof4^dest vuft, vufs         is vuinst & dest & vuft & vufs & vuop_0_10=0b00100111101
    { vuft = VITOF(dest, vufs); }
:vitof12^dest vuft, vufs        is vuinst & dest & vuft & vufs & vuop_0_10=0b00100111110
    { vuft = VITOF(dest, vufs); }
:vitof15^dest vuft, vufs        is vuinst & dest & vuft & vufs & vuop_0_10=0b00100111111
    { vuft = VITOF(dest, vufs); }
:vlqd^dest vuft, (--vuis)       is vuinst & dest & vuft & vuis & vuop_0_10=0b01101111110
    { vuft = VLQD(vuis); }
:vlqi^dest vuft, (vuis++)       is vuinst & dest & vuft & vuis & vuop_0_10=0b01101111100
    { vuft = VLQI(vuis); }
:vmadd^dest vufd, vufs, vuft    is vuinst & dest & vuft & vufs & vufd   & vuop_0_5=0b101001
    { vufd = VMADD(dest, vufs, vuft); }
:vmaddi^dest vufd, vufs, "I"    is vuinst & dest & vuft=0b00000  & vufs & vufd   & vuop_0_5=0b100011
    { vufd = VMADDBC(dest, vufs, vuI); }
:vmaddq^dest vufd, vufs, Q    is Q & vuinst & dest & vuft=0b00000  & vufs & vufd   & vuop_0_5=0b100001
    { vufd = VMADDBC(dest, vufs, Q); }
:vmadd^bc^dest vufd, vufs, vuft          is vuinst & dest & vuft & vufs & vufd   & vuop_2_5=0b0010 & bc
    { vufd = VMADDBC(dest, vufs, bc); }
:vmadda^dest "ACC", vufs, vuft  is vuinst & dest & vuft & vufs & vuop_0_10=0b01010111101
    { vuACC = VMADDBC(dest, vufs, vuft); }
:vmaddai^dest "ACC", vufs, "I"  is vuinst & dest & vuft=0b00000  & vufs & vuop_0_10=0b01000111111
    { vuACC = VMADDBC(dest, vufs, vuI); }
:vmaddaq^dest "ACC", vufs, Q  is Q & vuinst & dest & vuft=0b00000  & vufs & vuop_0_10=0b01000111101
    { vuACC = VMADDBC(dest, vufs, Q); }
:vmadda^bc^dest "ACC", vufs, vuft        is vuinst & dest & vuft & vufs & vuop_2_10=0b000101111 & bc
    { vuACC = VMADDBC(dest, vufs, vuft); }
:vmax^dest vufd, vufs, vuft     is vuinst & dest & vuft & vufs & vufd   & vuop_0_5=0b101011
    { vufd = VMAX(vufs, vuft); }
:vmaxi^dest vufd, vufs, "I"     is vuinst & dest & vuft=0b00000  & vufs & vufd   & vuop_0_5=0b011101
    { vufd = VMAXI(vufs, vuI); }
:vmax^bc^dest vufd, vufs, vuft  is vuinst & dest & vuft & vufs & vufd   & vuop_2_5=0b0100 & bc
    { vufd = VMAXBC(vufs, vuft); }
:vmfir^dest vuft, vuis          is vuinst & dest & vuft & vuis & vuop_0_10=0b01111111101
    { vuft = VMFIR(vuis); }
:vmini^dest vufd, vufs, vuft    is vuinst & dest & vuft & vufs & vufd   & vuop_0_5=0b101111
    { vufd = VMINI(vufs, vuft); }
:vminii^dest vufd, vufs, "I"    is vuinst & dest & vuft=0b00000  & vufs & vufd   & vuop_0_5=0b011111
    { vufd = VMINII(vufs, vuI); }
:vminibc^bc^dest vufd, vufs, vuft        is vuinst & dest & vuft & vufs & vufd   & vuop_2_5=0b0101 & bc
    { vufd = VMINIBC(vufs, vuft); }
:vmove^dest vuft, vufs          is vuinst & dest & vuft & vufs & vuop_0_10=0b01100111100
    { vuft = VMOVE(vufs); }
:vmr32^dest vuft, vufs          is vuinst & dest & vuft & vufs & vuop_0_10=0b01100111101
    { vuft = VMR32(vufs); }
:vmsub^dest vufd, vufs, vuft    is vuinst & dest & vufd & vufs & vuft   & vuop_0_5=0b101101
    { vufd = VMSUB(dest, vufs, vuft); }
:vmsubi^dest vufd, vufs, "I"    is vuinst & dest & vuft=0b00000  & vufs & vufd   & vuop_0_5=0b100111
    { vufd = VMSUBBC(dest, vufs, vuI); }
:vmsubq^dest vufd, vufs, Q    is Q & vuinst & dest & vuft=0b00000  & vufs & vufd   & vuop_0_5=0b100101
    { vufd = VMSUBBC(dest, vufs, Q); }
:vmsub^bc^dest vufd, vufs, vuft          is vuinst & dest & vuft & vufs & vufd   & vuop_2_5=0b0011 & bc
    { vufd = VMSUBBC(dest, vufs, vuft); }
:vmsuba^dest "ACC", vufs, vuft  is vuinst & dest & vuft & vufs & vuop_0_10=0b01011111101
    { vuACC = VMSUB(dest, vufs, vuft); }
:vmsubai^dest "ACC", vufs, "I"  is vuinst & dest & vuft=0b00000  & vufs & vuop_0_10=0b01001111111
    { vuACC = VMSUBBC(dest, vufs, vuI); }
:vmsubaq^dest "ACC", vufs, Q  is Q & vuinst & dest & vuft=0b00000  & vufs & vuop_0_10=0b01001111101
    { vuACC = VMSUBBC(dest, vufs, Q); }
:vmsuba^bc^dest "ACC", vufs, vuft        is vuinst & dest & vuft & vufs & vuop_2_10=0b000111111 & bc
    { vuACC = VMSUBBC(dest, vufs, vuft); }
:vmtir vuit, vufs^fsf      is vuinst & vuftf=0b00 & fsf & vuit & vufs & vuop_0_10=0b01111111100
{
    build fsf;
    vuit = VMTIR(fsf);
}
:vmul^dest vufd, vufs, vuft     is vuinst & dest & vuft & vufs & vufd   & vuop_0_5=0b101010
    { vufd = VMUL(dest, vufs, vuft); }
:vmuli^dest vufd, vufs, "I"     is vuinst & dest & vuft=0b00000  & vufs & vufd   & vuop_0_5=0b011110
    { vufd = VMULBC(dest, vufs, vuI); }
:vmulq^dest vufd, vufs, Q     is Q & vuinst & dest & vuft=0b00000  & vufs & vufd   & vuop_0_5=0b011100
    { vufd = VMULBC(dest, vufs, Q); }
:vmul^bc^dest vufd, vufs, vuft  is vuinst & dest & vuft & vufs & vufd   & vuop_2_5=0b0110 & bc
    { vufd = VMULBC(dest, vufs, bc); }
:vmula^dest "ACC", vufs, vuft   is vuinst & dest & vuft & vufs & vuop_0_10=0b01010111110
    { vuACC = VMUL(dest, vufs, vuft); }
:vmulai^dest "ACC", vufs, "I"   is vuinst & dest & vuft=0b00000  & vufs & vuop_0_10=0b00111111110
    { vuACC = VMULBC(dest, vufs, vuI); }
:vmulaq^dest "ACC", vufs, Q   is Q & vuinst & dest & vuft=0b00000  & vufs & vuop_0_10=0b00111111100
    { vuACC = VMULBC(dest, vufs, Q); }
:vmula^bc^dest "ACC", vufs, vuft         is vuinst & dest & vuft & vufs & vuop_2_10=0b001101111 & bc
    { vuACC = VMULBC(dest, vufs, bc); }
:vnop         is vuinst & vudest=0b0000 & vuft=0b00000 & vufs=0b00000 & vuop_0_10=0b01011111111
    {}
:vopmula."xyz" "ACC", vufs, vuft         is vuinst & vudest=0b1110 & vuft & vufs & vuop_0_10=0b01011111110
    { vuACC = VOPMULA(vufs, vuft); }
:vopmsub."xyz" vufd, vufs, vuft          is vuinst & vudest=0b1110 & vuft & vufs & vufd   & vuop_0_5=0b101110
    { vufd = VOPMSUB(vufs, vuft); }
:vrget^dest vuft, "R"           is vuinst & dest & vuft & vufs=0b00000  & vuop_0_10=0b10000111101
    { vuft = VRGET(vuft); }
:vrinit "R", vufs^fsf      is vuinst & vuftf=0b00 & fsf & vuft=0b00000 & vufs & vuop_0_10=0b10000111110
{
    build fsf;
    vuR_32 = fsf;
}
:vrnext^dest vuft, "R"          is vuinst & dest & vuft & vufs=0b00000  & vuop_0_10=0b10000111100
    { vuft = VRNEXT(vuR_32); }
:vrsqrt Q, vufs^fsf, vuft^ftf          is Q & vuinst & ftf & fsf & vuft & vufs & vuop_0_10=0b01110111110
{
    build fsf;
    build ftf;
    Q = fsf f/ sqrt(ftf);
}
:vrxor "R", vufs^fsf       is vuinst & vuftf=0b00 & fsf & vuft=0b00000 & vufs & vuop_0_10=0b10000111111
{
    build fsf;
    vuR_32 = vuR_32 ^ fsf;
}
:vsqd^dest vufs (--vuit)        is vuinst & dest & vuit & vufs & vuop_0_10=0b01101111111
    { VSQD(vuit, vufs); }
:vsqi^dest vufs (vuit++)        is vuinst & dest & vuit & vufs & vuop_0_10=0b01101111101
    { Q = VSQI(vufs, vuit); }
:vsqrt Q, vuft^ftf          is Q & vuinst & ftf  & vuft & vufs=0b00000 & vuop_0_10=0b01110111101
{
    build ftf;
    Q = sqrt(ftf);
}
:vsub^dest vufd, vufs, vuft     is vuinst & dest & vuft & vufs & vufd   & vuop_0_5=0b101100
    { vufd = VSUB(dest, vufs, vuft); }
:vsubi^dest vufd, vufs, "I"     is vuinst & dest & vuft=0b00000  & vufs & vufd   & vuop_0_5=0b100110
    { vufd = VSUBBC(dest, vufs, vuI); }
:vsubq^dest vufd, vufs, Q     is Q & vuinst & dest & vuft=0b00000  & vufs & vufd   & vuop_0_5=0b100100
    { vufd = VSUBBC(dest, vufd, vufs, Q); }
:vsub^bc^dest vufd, vufs, vuft  is vuinst & dest & vuft & vufs & vufd   & vuop_2_5=0b0001 & bc
    { vufd = VSUBBC(dest, vufs, bc); }
:vsuba^dest "ACC", vufs vuft    is vuinst & dest & vuft & vufs & vuop_0_10=0b01011111100
    { vuACC = VSUB(dest, vufs, vuft); }
:vsubai^dest "ACC", vufs, "I"   is vuinst & dest & vuft=0b00000  & vufs & vuop_0_10=0b01001111110
    { vuACC = VSUBBC(dest, vufs, Q); }
:vsubaq^dest "ACC", vufs, Q   is Q & vuinst & dest & vuft=0b00000  & vufs & vuop_0_10=0b01001111100
    { vuACC = VSUBBC(dest, vufs, Q); }
:vsuba^bc^dest "ACC", vufs, vuft         is vuinst & dest & vuft & vufs & vuop_2_10=0b000011111 & bc
    { vuACC = VSUBBC(dest, vufs, bc); }
:vwaitq       is vuinst & vudest=0b0000 & vuft=0b00000 & vufs=0b00000 & vuop_0_10=0b01110111111
    { Q = VWAITQ(); }

:abs^dest vuft, vufs^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b00111111101
{
	build VUFLAGS;
	vuft = VABS(dest, vufs); 
}
:add^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_0_5=0b101000
{
	build VUFLAGS;
	vufd = VADD(dest, vufs, vuft); 
}
:addi^dest_L vufd_L, vufs_L, ^VI^VUFLAGS_L is VI & VUFLAGS_L & dest_L & vuft_L=0 & vufs_L & vufd_L & vuop_32_37=0b100010
{
	vufd_L = VADDBC(dest_L, vufd_L, VI); 
}
:addi^dest vufd, vufs, "I"^VUFLAGS is VUFLAGS & dest & vuft=0b00000 & vufs & vufd & vuop_0_5=0b100010
{
	build VUFLAGS;
	vufd = VADDBC(dest, vufd, vuI); 
}
:addq^dest vufd, vufs, Q^VUFLAGS is Q & VUFLAGS & dest & vuft=0b00000 & vufs & vufd & vuop_0_5=0b100000
{
	build VUFLAGS;
	vufd = VADDBC(dest, vufs, Q); 
}
:add^bc^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_2_5=0b0000 & bc
{
	build VUFLAGS;
	vufd = VADDBC(dest, vufs, bc); 
}
:adda^dest "ACC" vuft vufs^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b01010111100
{
	build VUFLAGS;
	vuACC = VADD(dest, vuft, vufs); 
}
:addai^dest_L "ACC", vufs_L, ^VI^VUFLAGS_L is VI & VUFLAGS_L & dest_L & vuft_L=0 & vufs_L & vufd_L & vuop_32_42=0b01000111110
{
	vuACC = VADDBC(dest_L, vufs_L, VI); 
}
:addai^dest "ACC", vufs, "I"^VUFLAGS is VUFLAGS & dest & vuft=0b00000 & vufs & vuop_0_10=0b01000111110
{
	build VUFLAGS;
	vuACC = VADDBC(dest, vufs, vuI); 
}
:addaq^dest "ACC", vufs, Q^VUFLAGS is Q & VUFLAGS & dest & vuft=0b00000 & vufs & vuop_0_10=0b01000111100
{
	build VUFLAGS;
	vuACC = VADDBC(dest, vufs, Q); 
}
:adda^bc^dest "ACC", vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_2_10=0b000001111 & bc
{
	build VUFLAGS;
	vuACC = VADDBC(dest, vufs, bc); 
}
:clip"w.xyz" vufs, vuft^VUFLAGS is VUFLAGS & vudest=0b1110 & vuft & vufs & vuop_0_10=0b00111111111
{
	build VUFLAGS;
	tmp:3 = *[register]:3 &vuCF_32;
	tmp = tmp[0,23] << 6;
	w:4 = abs(vuft[0,32]);
	tmp[0,1] = vufs[96,32] f> w;
	tmp[1,1] = vufs[96,32] f< f- w;
	tmp[2,1] = vufs[64,32] f> w;
	tmp[3,1] = vufs[64,32] f< f- w;
	tmp[4,1] = vufs[32,32] f> w;
	tmp[5,1] = vufs[32,32] f< f- w;
	*[register]:3 &vuCF_32 = tmp;
}
:ftoi0^dest_L vuft_L, vufs_L, VI^VUFLAGS_L is VUFLAGS_L & VI & dest_L & vuft_L & vufs_L & vuop_32_42=0b00101111100
{
	build VI;
	build VUFLAGS_L;
	vuft_L = VFTOI0(dest_L, vufs_L); 
}
:ftoi0^dest vuft, vufs^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b00101111100
{
	build VUFLAGS;
	vuft = VFTOI0(dest, vufs); 
}
:ftoi4^dest_L vuft_L, vufs_L, VI^VUFLAGS_L is VUFLAGS_L & VI & dest_L & vuft_L & vufs_L & vuop_32_42=0b00101111101
{
	build VI;
	build VUFLAGS_L;
	vuft_L = VFTOI(dest_L, vufs_L); 
}
:ftoi4^dest vuft, vufs^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b00101111101
{
	build VUFLAGS;
	vuft = VFTOI(dest, vufs); 
}
:ftoi12^dest_L vuft_L, vufs_L, VI^VUFLAGS_L is VUFLAGS_L & VI & dest_L & vuft_L & vufs_L & vuop_32_42=0b00101111110
{
	build VI;
	build VUFLAGS_L;
	vuft_L = VFTOI(dest_L, vufs_L); 
}
:ftoi12^dest vuft, vufs^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b00101111110
{
	build VUFLAGS;
	vuft = VFTOI(dest, vufs); 
}
:ftoi15^dest_L vuft_L, vufs_L, VI^VUFLAGS_L is VUFLAGS_L & VI & dest_L & vuft_L & vufs_L & vuop_32_42=0b00101111111
{
	build VI;
	build VUFLAGS_L;
	vuft_L = VFTOI(dest_L, vufs_L); 
}
:ftoi15^dest vuft, vufs^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b00101111111
{
	build VUFLAGS;
	vuft = VFTOI(dest, vufs); 
}
:itof0^dest_L vuft_L, vufs_L, VI^VUFLAGS_L is VUFLAGS_L & VI & dest_L & vuft_L & vufs_L & vuop_32_42=0b00100111100
{
	build VI;
	build VUFLAGS_L;
	vuft_L = VITOF(dest_L, vufs_L); 
}
:itof0^dest vuft, vufs^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b00100111100
{
	build VUFLAGS;
	vuft = VITOF(dest, vufs); 
}
:itof4^dest_L vuft_L, vufs_L, VI^VUFLAGS_L is VUFLAGS_L & VI & dest_L & vuft_L & vufs_L & vuop_32_42=0b00100111101
{
	build VI;
	build VUFLAGS_L;
	vuft_L = VITOF(dest_L, vufs_L); 
}
:itof4^dest vuft, vufs^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b00100111101
{
	build VUFLAGS;
	vuft = VITOF(dest, vufs); 
}
:itof12^dest_L vuft_L, vufs_L, VI^VUFLAGS_L is VUFLAGS_L & VI & dest_L & vuft_L & vufs_L & vuop_32_42=0b00100111110
{
	build VI;
	build VUFLAGS_L;
	vuft_L = VITOF(dest_L, vufs_L); 
}
:itof12^dest vuft, vufs^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b00100111110
{
	build VUFLAGS;
	vuft = VITOF(dest, vufs); 
}
:itof15^dest_L vuft_L, vufs_L, VI^VUFLAGS_L is VUFLAGS_L & VI & dest_L & vuft_L & vufs_L & vuop_32_42=0b00100111111
{
	build VI;
	build VUFLAGS_L;
	vuft_L = VITOF(dest_L, vufs_L); 
}
:itof15^dest vuft, vufs^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b00100111111
{
	build VUFLAGS;
	vuft = VITOF(dest, vufs); 
}
:madd^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_0_5=0b101001
{
	build VUFLAGS;
	vufd = VMADD(dest, vufs, vuft); 
}
:maddi^dest_L vufd_L, vufs_L, ^VI^VUFLAGS_L is VI & VUFLAGS_L & dest_L & vuft_L=0 & vufs_L & vufd_L & vuop_32_37=0b100011
{
	vufd_L = VMADDBC(dest_L, vufs_L, VI); 
}
:maddi^dest vufd, vufs, "I"^VUFLAGS is VUFLAGS & dest & vuft=0b00000 & vufs & vufd & vuop_0_5=0b100011
{
	build VUFLAGS;
	vufd = VMADDBC(dest, vufs, vuI); 
}
:maddq^dest vufd, vufs, Q^VUFLAGS is Q & VUFLAGS & dest & vuft=0b00000 & vufs & vufd & vuop_0_5=0b100001
{
	build VUFLAGS;
	vufd = VMADDBC(dest, vufs, Q); 
}
:madd^bc^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_2_5=0b0010 & bc
{
	build VUFLAGS;
	vufd = VMADDBC(dest, vufs, bc); 
}
:madda^dest "ACC", vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b01010111101
{
	build VUFLAGS;
	vuACC = VMADD(dest, vufs, vuft); 
}
:maddai^dest_L "ACC", vufs_L, ^VI^VUFLAGS_L is VI & VUFLAGS_L & dest_L & vuft_L=0 & vufs_L & vufd_L & vuop_32_42=0b01000111111
{
	vuACC = VMADDBC(dest_L, vufs_L, VI); 
}
:maddai^dest "ACC", vufs, "I"^VUFLAGS is VUFLAGS & dest & vuft=0b00000 & vufs & vuop_0_10=0b01000111111
{
	build VUFLAGS;
	vuACC = VMADDBC(dest, vufs, vuI); 
}
:maddaq^dest "ACC", vufs, Q^VUFLAGS is Q & VUFLAGS & dest & vuft=0b00000 & vufs & vuop_0_10=0b01000111101
{
	build VUFLAGS;
	vuACC = VMADDBC(dest, vufs, Q); 
}
:madda^bc^dest "ACC", vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_2_10=0b000101111 & bc
{
	build VUFLAGS;
	vuACC = VMADDBC(dest, vufs, bc); 
}
:max^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_0_5=0b101011
{
	build VUFLAGS;
	vufd = VMAX(vufs, vuft); 
}
:maxi^dest_L vufd_L, vufs_L, ^VI^VUFLAGS_L is VI & VUFLAGS_L & dest_L & vuft_L=0 & vufs_L & vufd_L & vuop_32_37=0b011101
{
	vufd_L = VMAXI(vufs_L, VI); 
}
:maxi^dest vufd, vufs, "I"^VUFLAGS is VUFLAGS & dest & vuft=0b00000 & vufs & vufd & vuop_0_5=0b011101
{
	build VUFLAGS;
	vufd = VMAXI(vufs, vuI); 
}
:max^bc^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_2_5=0b0100 & bc
{
	build VUFLAGS;
	vufd = VMAXBC(vufs, bc); 
}
:mini^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_0_5=0b101111
{
	build VUFLAGS;
	vufd = VMINI(vufs, vuft); 
}
:minii^dest_L vufd_L, vufs_L, ^VI^VUFLAGS_L is VI & VUFLAGS_L & dest_L & vuft_L=0 & vufs_L & vufd_L & vuop_32_37=0b011111
{
	vufd_L = VMINII(vufs_L, VI); 
}
:minii^dest vufd, vufs, "I"^VUFLAGS is VUFLAGS & dest & vuft=0b00000 & vufs & vufd & vuop_0_5=0b011111
{
	build VUFLAGS;
	vufd = VMINII(vufs, vuI); 
}
:minibc^bc^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_2_5=0b0101 & bc
{
	build VUFLAGS;
	vufd = VMINIBC(vufs, bc); 
}
:msub^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vufd & vufs & vuft & vuop_0_5=0b101101
{
	build VUFLAGS;
	vufd = VMSUB(dest, vufs, vuft); 
}
:msubi^dest_L vufd_L, vufs_L, ^VI^VUFLAGS_L is VI & VUFLAGS_L & dest_L & vuft_L=0 & vufs_L & vufd_L & vuop_32_37=0b100111
{
	vufd_L = VMSUBBC(dest_L, vufs_L, VI); 
}
:msubi^dest vufd, vufs, "I"^VUFLAGS is VUFLAGS & dest & vuft=0b00000 & vufs & vufd & vuop_0_5=0b100111
{
	build VUFLAGS;
	vufd = VMSUBBC(dest, vufs, vuI); 
}
:msubq^dest vufd, vufs, Q^VUFLAGS is Q & VUFLAGS & dest & vuft=0b00000 & vufs & vufd & vuop_0_5=0b100101
{
	build VUFLAGS;
	vufd = VMSUBBC(dest, vufs, Q); 
}
:msub^bc^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_2_5=0b0011 & bc
{
	build VUFLAGS;
	vufd = VMSUBBC(dest, vufs, bc); 
}
:msuba^dest "ACC", vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b01011111101
{
	build VUFLAGS;
	vuACC = VMSUB(dest, vufs, vuft); 
}
:msubai^dest_L "ACC", vufs_L, ^VI^VUFLAGS_L is VI & VUFLAGS_L & dest_L & vuft_L=0 & vufs_L & vuop_32_42=0b01001111111
{
	vuACC = VMSUBBC(dest_L, vufs_L, VI); 
}
:msubai^dest "ACC", vufs, "I"^VUFLAGS is VUFLAGS & dest & vuft=0b00000 & vufs & vuop_0_10=0b01001111111
{
	build VUFLAGS;
	vuACC = VMSUBBC(dest, vufs, vuI); 
}
:msubaq^dest "ACC", vufs, Q^VUFLAGS is Q & VUFLAGS & dest & vuft=0b00000 & vufs & vuop_0_10=0b01001111101
{
	build VUFLAGS;
	vuACC = VMSUBBC(dest, vufs, Q); 
}
:msuba^bc^dest "ACC", vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_2_10=0b000111111 & bc
{
	build VUFLAGS;
	vuACC = VMSUBBC(dest, vufs, bc); 
}
:mul^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_0_5=0b101010
{
	build VUFLAGS;
	vufd = VMUL(dest, vufs, vuft); 
}
:muli^dest_L vufd_L, vufs_L, ^VI^VUFLAGS_L is VUFLAGS_L & vufd_L & vufs_L & vuft_L=0 & dest_L & VI & vuop_32_37=0b011110
{
	vufd_L = VMULBC(dest_L, vufs_L, VI); 
}
:muli^dest vufd, vufs, "I"^VUFLAGS is VUFLAGS & dest & vuft=0b00000 & vufs & vufd & vuop_0_5=0b011110
{
	build VUFLAGS;
	vufd = VMULBC(dest, vufs, vuI); 
}
:mulq^dest vufd, vufs, Q^VUFLAGS is Q & VUFLAGS & dest & vuft=0b00000 & vufs & vufd & vuop_0_5=0b011100
{
	build VUFLAGS;
	vufd = VMULBC(dest, vufs, Q); 
}
:mul^bc^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_2_5=0b0110 & bc
{
	build VUFLAGS;
	vufd = VMULBC(dest, vufs, bc); 
}
:mula^dest "ACC", vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b01010111110
{
	build VUFLAGS;
	vuACC = VMUL(dest, vufs, vuft); 
}
:mulai^dest_L "ACC", vufs_L, ^VI^VUFLAGS_L is VI & VUFLAGS_L & dest_L & vuft_L=0 & vufs_L & vuop_32_42=0b00111111110
{
	vuACC = VMULBC(dest_L, vufs_L, VI); 
}
:mulai^dest "ACC", vufs, "I"^VUFLAGS is VUFLAGS & dest & vuft=0b00000 & vufs & vuop_0_10=0b00111111110
{
	build VUFLAGS;
	vuACC = VMULBC(dest, vufs, vuI); 
}
:mulaq^dest "ACC", vufs, Q^VUFLAGS is Q & VUFLAGS & dest & vuft=0b00000 & vufs & vuop_0_10=0b00111111100
{
	build VUFLAGS;
	vuACC = VMULBC(dest, vufs, Q); 
}
:mula^bc^dest "ACC", vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_2_10=0b001101111 & bc
{
	build VUFLAGS;
	vuACC = VMULBC(dest, vufs, bc); 
}
:nop^VUFLAGS is VUFLAGS & vudest=0b0000 & vuft=0b00000 & vufs=0b00000 & vuop_0_10=0b01011111111{}
:nop^VUFLAGS_L is VUFLAGS_L & longnop=0x33C080002FF {}
:opmula."xyz" "ACC", vufs, vuft^VUFLAGS is VUFLAGS & vudest=0b1110 & vuft & vufs & vuop_0_10=0b01011111110
{
	build VUFLAGS;
	*[register]:4 &vuACCx = vufs[64,32] f* vuft[32,32];
	*[register]:4 &vuACCy = vufs[32,32] f* vuft[96,32];
	*[register]:4 &vuACCz = vufs[96,32] f* vuft[64,32];
}
:opmsub."xyz" vufd, vufs, vuft^VUFLAGS is VUFLAGS & vudest=0b1110 & vuft & vufs & vufd & vuop_0_5=0b101110
{
	build VUFLAGS;
	vufd[96,32] = *[register]:4 &vuACCx f- vufs[64,32] f* vuft[32,32];
	vufd[64,32] = *[register]:4 &vuACCy f- vufs[32,32] f* vuft[96,32];
	vufd[32,32] = *[register]:4 &vuACCz f- vufs[96,32] f* vuft[64,32];
}
:sub^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_0_5=0b101100
{
	build VUFLAGS;
	vufd = VSUB(dest, vufs, vuft); 
}
:subi^dest_L vufd_L, vufs_L, ^VI^VUFLAGS_L is VI & VUFLAGS_L & dest_L & vuft_L=0 & vufs_L & vufd_L & vuop_32_37=0b100110
{
	vufd_L = VSUBBC(dest_L, vufs_L, VI); 
}
:subi^dest vufd, vufs, "I"^VUFLAGS is VUFLAGS & dest & vuft=0b00000 & vufs & vufd & vuop_0_5=0b100110
{
	build VUFLAGS;
	vufd = VSUBBC(dest, vufs, vuI); 
}
:subq^dest vufd, vufs, Q^VUFLAGS is Q & VUFLAGS & dest & vuft=0b00000 & vufs & vufd & vuop_0_5=0b100100
{
	build VUFLAGS;
	vufd = VSUBBC(dest, vufd, vufs, Q); 
}
:sub^bc^dest vufd, vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vufd & vuop_2_5=0b0001 & bc
{
	build VUFLAGS;
	vufd = VSUBBC(dest, vufs, bc); 
}
:suba^dest "ACC", vufs vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_0_10=0b01011111100
{
	build VUFLAGS;
	vuACC = VSUB(dest, vufs, vuft); 
}
:subai^dest_L "ACC", vufs_L, ^VI^VUFLAGS_L is VI & VUFLAGS_L & dest_L & vuft_L=0 & vufs_L & vuop_32_42=0b01001111110
{
	vuACC = VSUBBC(dest_L, vufs_L, VI); 
}
:subai^dest "ACC", vufs, "I"^VUFLAGS is VUFLAGS & dest & vuft=0b00000 & vufs & vuop_0_10=0b01001111110
{
	build VUFLAGS;
	vuACC = VSUBBC(dest, vufs, vuI); 
}
:subaq^dest "ACC", vufs, Q^VUFLAGS is Q & VUFLAGS & dest & vuft=0b00000 & vufs & vuop_0_10=0b01001111100
{
	build VUFLAGS;
	vuACC = VSUBBC(dest, vufs, Q); 
}
:suba^bc^dest "ACC", vufs, vuft^VUFLAGS is VUFLAGS & dest & vuft & vufs & vuop_2_10=0b000011111 & bc
{
	build VUFLAGS;
	vuACC = VSUBBC(dest, vufs, bc); 
}
